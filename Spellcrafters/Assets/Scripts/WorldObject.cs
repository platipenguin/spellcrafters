using System.Collections;
using System.Collections.Generic;
using UnityEngine;

/// <summary>
/// Represents a physical object in the game world
/// </summary>
public class WorldObject : MonoBehaviour
{
    /// <summary>
    /// Universal conversion value from health points to magic points
    /// </summary>
    public static float HEALTH_CONVERSION_CONSTANT = 1.5f;

    /// <summary>
    /// The amount of magic required to cast a line of a spell
    /// </summary>
    public static float CASTING_COST = 2f;

    /// <summary>
    /// The current number of hitpoints the object has
    /// </summary>
    public float health;

    /// <summary>
    /// The current number of magic points the object has
    /// </summary>
    public float magic;

    /// <summary>
    /// The current number of armor points the object has
    /// </summary>
    public float armor;

    /// <summary>
    /// The maximum number of hitpoints the object can have
    /// </summary>
    public float maxHealth;

    /// <summary>
    /// The maximum number of magic points the object can have
    /// </summary>
    public float maxMagic;

    /// <summary>
    /// The maximum amount of armor this object can have
    /// </summary>
    public float maxArmor;

    /// <summary>
    /// Determines how effective the ReduceHealth and ReduceMagic methods will be on this object
    /// </summary>
    public float magicDefense;

    /// <summary>
    /// Whether or not this object is currently alive
    /// </summary>
    public bool alive;

    /// <summary>
    /// Whether or not this object is inanimate, such as a stone, or alive, such as an NPC or tree
    /// </summary>
    public bool inanimate;

    /// <summary>
    /// The rate at which the object can speed up
    /// </summary>
    public float acceleration;

    /// <summary>
    /// The speed at which this object regains magic
    /// </summary>
    public float magicRegen;

    private StatusBars bars;

    public WorldObject(float _health, float _magic, float _armor, float _maxHealth, float _maxMagic, float _maxArmor, float _magicDefense, bool _alive, bool _inanimate, float _acceleration, float _magicRegen)
    {
        health = _health;
        magic = _magic;
        armor = _armor;
        maxHealth = _maxHealth;
        maxMagic = _maxMagic;
        maxArmor = _maxArmor;
        magicDefense = _magicDefense;
        alive = _alive;
        inanimate = _inanimate;
        acceleration = _acceleration;
        magicRegen = _magicRegen;
    }

    void Start()
    {
        bars = gameObject.GetComponentInChildren<StatusBars>();
    }

    /// <summary>
    /// Drains energy from this WorldObject for creating a Mana variable.
    /// Drains from magic first, then health.
    /// </summary>
    /// <returns>The number of gandalfs that were actually generated by the channeling</returns>
    public float ConsumeMana(float amount)
    {
        if (amount < magic)
        {
            magic -= amount;
            return amount;
        }
        float magicDelta = amount - magic;
        float spillover = magicDelta / WorldObject.HEALTH_CONVERSION_CONSTANT;
        magic = 0;
        if (health > spillover)
        {
            health -= spillover;
            return amount;
        }
        float healthDelta = spillover - health;
        float amountChanneled = magicDelta + (healthDelta * WorldObject.HEALTH_CONVERSION_CONSTANT);
        health = 0;
        return amountChanneled;
    }

    /// <summary>
    /// Called when this object takes physical damage
    /// </summary>
    public void Damage(float amount)
    {
        if (armor > amount)
        {
            armor -= amount;
        }
        else
        {
            float armorDelta = amount - armor;
            armor = 0;
            if (health > armorDelta)
                health -= armorDelta;
            else
                health = 0;
        }
    }

    /// <summary>
    /// Should be called on update by every object that hasn't been destroyed.
    /// Determines if the object has died, updates magic, etc.
    /// </summary>
    protected void UpdateObject()
    {
        if (health <= 0 && alive)
        {
            alive = false;
            health = 0;
        }
        magic += magicRegen * Time.deltaTime;
        if (magic > maxMagic)
        {
            magic = maxMagic;
        }
        HandleBars();
    }

    void OnCollisionEnter2D(Collision2D collision)
    {
        if (collision.relativeVelocity.magnitude > 5)
        {
            float massDif = collision.rigidbody.mass - GetComponent<Rigidbody2D>().mass;
            float massMod = 0;
            if (massDif > 0)
                massMod += massDif / 10;
            health -= (collision.relativeVelocity.magnitude) + massMod;
        }
    }

    private void HandleBars()
    {
        if (magic == maxMagic && health == maxHealth && armor == maxArmor)
            bars.gameObject.SetActive(false);
        else
        {
            bars.gameObject.SetActive(true);
            bars.UpdateBars(GetStatusFloat(magic, maxMagic), GetStatusFloat(health, maxHealth), GetStatusFloat(armor, maxArmor));
        }
    }

    /// <summary>
    /// Get the percent of the specified status to send to the status bars
    /// </summary>
    private float GetStatusFloat(float current, float max)
    {
        if (max == 0)
            return 0;
        return current / max;
    }
}
